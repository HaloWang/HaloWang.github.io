<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王策的博客</title>
  <subtitle>一个 iOS 开发者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-03-04T21:10:38.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WangCe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 Swift 环境下使用 JavaScriptCore 和本地代码交互</title>
    <link href="http://yoursite.com/2016/03/01/%E5%9C%A8%20Swift%20%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8%20JavaScriptCore%20%E5%92%8C%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92/"/>
    <id>http://yoursite.com/2016/03/01/在 Swift 环境下使用 JavaScriptCore 和本地代码交互/</id>
    <published>2016-03-01T15:36:50.000Z</published>
    <updated>2016-03-04T21:10:38.000Z</updated>
    
    <content type="html">&lt;p&gt;最近被问起这样的问题，所以把自己知道的写出来&lt;br&gt;包括 Web 端调用 Native 和 Native 调用 Web，算是记录一下&lt;/p&gt;
&lt;h3 id=&quot;如果你想直接看源码&quot;&gt;&lt;a href=&quot;#如果你想直接看源码&quot; class=&quot;headerlink&quot; title=&quot;如果你想直接看源码&quot;&gt;&lt;/a&gt;如果你想直接看源码&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/HaloWang/JavaScriptCoreDemo/blob/master/finish.zip?raw=true&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;是项目的完整代码&lt;/p&gt;
&lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;p&gt;请大家先下载&lt;a href=&quot;https://github.com/HaloWang/JavaScriptCoreDemo/blob/master/begin.zip?raw=true&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;初始项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文使用 Xcode 7.2.1 + Swift，最低兼容 iOS 8.0&lt;/p&gt;
&lt;h4 id=&quot;先来看看初始项目&quot;&gt;&lt;a href=&quot;#先来看看初始项目&quot; class=&quot;headerlink&quot; title=&quot;先来看看初始项目&quot;&gt;&lt;/a&gt;先来看看初始项目&lt;/h4&gt;&lt;h5 id=&quot;ViewController-swift&quot;&gt;&lt;a href=&quot;#ViewController-swift&quot; class=&quot;headerlink&quot; title=&quot;ViewController.swift&quot;&gt;&lt;/a&gt;ViewController.swift&lt;/h5&gt;&lt;p&gt;ViewController.swift 主要配合 Main.storyboard 绘制了 UI 元素&lt;br&gt;接下来绝大部分代码工作将在这个文件中进行&lt;br&gt;&lt;code&gt;viewDidLoad&lt;/code&gt;方法中主要是让 webView 加载 Bundle 中的 html 文件&lt;br&gt;&lt;img src=&quot;/image_001/viewController.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;JavaScriptCoreDemo-html&quot;&gt;&lt;a href=&quot;#JavaScriptCoreDemo-html&quot; class=&quot;headerlink&quot; title=&quot;JavaScriptCoreDemo.html&quot;&gt;&lt;/a&gt;JavaScriptCoreDemo.html&lt;/h5&gt;&lt;p&gt;这个文件主要用来模拟实际使用时我们会遇到的 web 页面&lt;br&gt;&lt;img src=&quot;/image_001/webPage.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Web-端调用-iOS-端代码&quot;&gt;&lt;a href=&quot;#Web-端调用-iOS-端代码&quot; class=&quot;headerlink&quot; title=&quot;Web 端调用 iOS 端代码&quot;&gt;&lt;/a&gt;Web 端调用 iOS 端代码&lt;/h3&gt;&lt;p&gt;我将其分为了如下步骤&lt;/p&gt;
&lt;h4 id=&quot;为-WebView-注册代理，并实现代理方法&quot;&gt;&lt;a href=&quot;#为-WebView-注册代理，并实现代理方法&quot; class=&quot;headerlink&quot; title=&quot;为 WebView 注册代理，并实现代理方法&quot;&gt;&lt;/a&gt;为 WebView 注册代理，并实现代理方法&lt;/h4&gt;&lt;p&gt;&lt;code&gt;webView.delegate = self&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extension ViewController : UIWebViewDelegate {
    func webViewDidFinishLoad(webView: UIWebView) {
        //    Waiting
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;获取到当前-Web-页面中的上下文&quot;&gt;&lt;a href=&quot;#获取到当前-Web-页面中的上下文&quot; class=&quot;headerlink&quot; title=&quot;获取到当前 Web 页面中的上下文&quot;&gt;&lt;/a&gt;获取到当前 Web 页面中的上下文&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;func webViewDidFinishLoad(webView: UIWebView) {
    context = webView.valueForKeyPath(&amp;quot;documentView.webView.mainFrame.javaScriptContext&amp;quot;) as? JSContext
    //    Waiting
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;注册回调&quot;&gt;&lt;a href=&quot;#注册回调&quot; class=&quot;headerlink&quot; title=&quot;注册回调&quot;&gt;&lt;/a&gt;注册回调&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;func webViewDidFinishLoad(webView: UIWebView) {

    context = webView.valueForKeyPath(&amp;quot;documentView.webView.mainFrame.javaScriptContext&amp;quot;) as? JSContext

    let callBack : @convention(block) (AnyObject?) -&amp;gt; Void = { [weak self] (paramFromJS) -&amp;gt; Void in
        //    Waiting
     }

    context?.setObject(unsafeBitCast(callBack, AnyObject.self), forKeyedSubscript: &amp;quot;callNative&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;展示-Web-页面传递过来的的参数&quot;&gt;&lt;a href=&quot;#展示-Web-页面传递过来的的参数&quot; class=&quot;headerlink&quot; title=&quot;展示 Web 页面传递过来的的参数&quot;&gt;&lt;/a&gt;展示 Web 页面传递过来的的参数&lt;/h4&gt;&lt;p&gt;最后我们需要通知自己原生代码已经接受到了 web 端的调用，并且输出一下 web 页面传递过来了参数&lt;/p&gt;
&lt;p&gt;在 ViewController 类中，实现 fromJS 方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func fromJS(paramFromJS:AnyObject?) {

    Alert
        .showIn(self)
        .style(UIAlertControllerStyle.ActionSheet)
        .title(&amp;quot;Call From JS&amp;quot;)
        .message(&amp;quot;检测到了来自 JS 的调用！&amp;quot;)
        .addAction(&amp;quot;我知道了&amp;quot;, style: .Cancel, handler: nil)

    guard let paramFromJS = paramFromJS else {
        return
    }

    print(&amp;quot;param from JavaScript is:&amp;quot;)
    print(paramFromJS)

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 Alert 类来自于 Halo.framework，用来通知自己原生代码已经接受到了 web 端的调用，对 UIAlertController 做了简单的封装，不必关心&lt;/p&gt;
&lt;p&gt;在上一步中的 &lt;code&gt;Waiting&lt;/code&gt; 注释处调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let callBack : @convention(block) (AnyObject?) -&amp;gt; Void = { [weak self] (paramFromJS) -&amp;gt; Void in
    self?.fromJS(paramFromJS)    
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 这里的 self (也就是我们的 ViewController) 中被加上了 weak 修饰符，这是因为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;context?.setObject(unsafeBitCast(callBack, AnyObject.self), forKeyedSubscript: &amp;quot;callNative&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;context 会强引用这个回调块，为了避免强引用，我们需要将 self 在 block 中声明为弱引用&lt;/p&gt;
&lt;p&gt;至于 @convention(block) ，大家可以参看&lt;a href=&quot;http://stackoverflow.com/questions/32776342/how-to-store-this-objectivec-block-inside-a-swift-variable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: 还有一个问题，上面的代码大家是不是有点害怕？优雅的 Swift 怎么会出现 &lt;code&gt;unsafeBitCast(callBack, AnyObject.self)&lt;/code&gt; 这样的代码！大家可以看看 &lt;a href=&quot;http://nshipster.cn/javascriptcore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;br&gt;期待 iOS10 SDK 中 Swift 环境下，JSContext 可以实现下标访问&lt;/p&gt;
&lt;p&gt;PS2: 另外，我在这里将 paramFromJS 声明为了 AnyObject? 类型，JavaScriptCore 是可以自动将 js 传递的参数做转换的，上面例子中，我们通过&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(paramFromJS!.dynamicType)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以发现 paramFromJS 被转化为了&lt;code&gt;__NSDictionaryM&lt;/code&gt;&lt;br&gt;关于 dynamicType，请看&lt;a href=&quot;http://swifter.tips/instance-type/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运行程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此时控制台输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image_001/consolo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;模拟器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image_001/callNative.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;iOS-端调用-Web-的-js-代码&quot;&gt;&lt;a href=&quot;#iOS-端调用-Web-的-js-代码&quot; class=&quot;headerlink&quot; title=&quot;iOS 端调用 Web 的 js 代码&quot;&gt;&lt;/a&gt;iOS 端调用 Web 的 js 代码&lt;/h3&gt;&lt;p&gt;可以分为两种方式&lt;/p&gt;
&lt;h4 id=&quot;调用-Web-页面中已经实现好的-JS&quot;&gt;&lt;a href=&quot;#调用-Web-页面中已经实现好的-JS&quot; class=&quot;headerlink&quot; title=&quot;调用 Web 页面中已经实现好的 JS&quot;&gt;&lt;/a&gt;调用 Web 页面中已经实现好的 JS&lt;/h4&gt;&lt;p&gt;我们的 web 页面中包含了一段已经写好的 JavaScript function：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function fromNative(args) {
    document.getElementById(&amp;quot;fromNativeParan&amp;quot;).innerHTML = &amp;quot;来自原生代码的参数为&amp;quot; + args;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以通过 JavaScriptContext 直接对其进行调用：&lt;/p&gt;
&lt;p&gt;在 ViewController 类中，实现 callJS 方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func callJS() {
    let params : [AnyObject]! = [&amp;quot;Hello JS! \(arc4random() % 10)&amp;quot;]
    context?.objectForKeyedSubscript(&amp;quot;fromNative&amp;quot;).callWithArguments(params)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;arc4random() % 10 的作用是为了产生随机取以区分多次点击&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在 rightBarButtonClick 中调用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@IBAction func rightBarButtonClick(sender: UIBarButtonItem) {
    callJS()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;web 页面产生了如下变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image_001/callJS.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;直接注入一段-JS-代码&quot;&gt;&lt;a href=&quot;#直接注入一段-JS-代码&quot; class=&quot;headerlink&quot; title=&quot;直接注入一段 JS 代码&quot;&gt;&lt;/a&gt;直接注入一段 JS 代码&lt;/h4&gt;&lt;p&gt;在 ViewController 类中，实现 evaluateJS 方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func evaluateJS() {
    context?.evaluateScript(&amp;quot;alert(\&amp;quot;你调用了 JS\&amp;quot;)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 rightBarButtonClick 中调用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@IBAction func rightBarButtonClick(sender: UIBarButtonItem) {
    evaluateJS()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image_001/callJS_2.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;PS: 实际上 evaluateJS 还可以小城下面这种形式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func evaluateJS() {
    context?.evaluateScript(&amp;quot;fromNative(&amp;apos; 你运行了一段JS&amp;apos;)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时该方法的作用和 ViewController.callJS 就一样了&lt;/p&gt;
&lt;h3 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h3&gt;&lt;p&gt;再次附上项目的&lt;a href=&quot;https://github.com/HaloWang/JavaScriptCoreDemo/blob/master/finish.zip?raw=true&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题外话&quot;&gt;&lt;a href=&quot;#题外话&quot; class=&quot;headerlink&quot; title=&quot;题外话&quot;&gt;&lt;/a&gt;题外话&lt;/h4&gt;&lt;p&gt;本来还想写点 WKWebView 的东西，但鉴于自己以前的使用经历，还是算了…&lt;br&gt;简单说一下使用 WKWebView 遇到的坑吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法通过点击 web 页面跳转到 AppStore，&lt;a href=&quot;http://stackoverflow.com/questions/29056854/how-can-i-understand-if-uiapplication-is-going-to-open-link-in-safari-app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在淘宝页面时无法点击 web 页面上的按钮，&lt;a href=&quot;http://stackoverflow.com/questions/31955880/wkwebview-not-opening-some-target-blank-links&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;web 页面的 alert 在移动端上失效，&lt;a href=&quot;http://stackoverflow.com/questions/26898941/ios-wkwebview-not-showing-javascript-alert-dialog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个都是超级严重的 bug 有没有！&lt;br&gt;在产品经理面前直冒冷汗有没有！&lt;/p&gt;
&lt;h4 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nshipster.cn/javascriptcore/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSHipster - JavaScriptCore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近被问起这样的问题，所以把自己知道的写出来&lt;br&gt;包括 Web 端调用 Native 和 Native 调用 Web，算是记录一下&lt;/p&gt;
&lt;h3 id=&quot;如果你想直接看源码&quot;&gt;&lt;a href=&quot;#如果你想直接看源码&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>写点什么好呢？</title>
    <link href="http://yoursite.com/2016/03/01/first-article/"/>
    <id>http://yoursite.com/2016/03/01/first-article/</id>
    <published>2016-03-01T12:30:26.000Z</published>
    <updated>2016-03-01T15:32:48.000Z</updated>
    
    <content type="html">&lt;p&gt;正式开启了个人博客😁&lt;/p&gt;
&lt;p&gt;下面是一些我想写的东西&lt;/p&gt;
&lt;h3 id=&quot;Halo-framework&quot;&gt;&lt;a href=&quot;#Halo-framework&quot; class=&quot;headerlink&quot; title=&quot;Halo.framework&quot;&gt;&lt;/a&gt;Halo.framework&lt;/h3&gt;&lt;p&gt;使用 Swift 开发 iOS App 以来所总结的东西&lt;/p&gt;
&lt;h3 id=&quot;JS-和-iOS-原生交互的若干种方法&quot;&gt;&lt;a href=&quot;#JS-和-iOS-原生交互的若干种方法&quot; class=&quot;headerlink&quot; title=&quot;JS 和 iOS 原生交互的若干种方法&quot;&gt;&lt;/a&gt;JS 和 iOS 原生交互的若干种方法&lt;/h3&gt;&lt;p&gt;最近被问起这样的问题&lt;/p&gt;
&lt;h3 id=&quot;使用-Instrument&quot;&gt;&lt;a href=&quot;#使用-Instrument&quot; class=&quot;headerlink&quot; title=&quot;使用 Instrument&quot;&gt;&lt;/a&gt;使用 Instrument&lt;/h3&gt;&lt;p&gt;曾经使用过，现在来总结一下&lt;/p&gt;
&lt;p&gt;敬请期待~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;正式开启了个人博客😁&lt;/p&gt;
&lt;p&gt;下面是一些我想写的东西&lt;/p&gt;
&lt;h3 id=&quot;Halo-framework&quot;&gt;&lt;a href=&quot;#Halo-framework&quot; class=&quot;headerlink&quot; title=&quot;Halo.framework&quot;&gt;&lt;/a&gt;Halo.f
    
    </summary>
    
    
  </entry>
  
</feed>
